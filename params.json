{"name":"N2O","tagline":"Erlang WebSocket Application Server","body":"N2O: Erlang Web Framework\r\n=========================\r\n\r\nFeatures\r\n--------\r\n\r\n* Formatters: BERT, JSON, Binary or Custom\r\n* Protocols: Nitrogen, RoR, N2O\r\n* Endpoints: WebSocket, HTTP, REST\r\n* PubSub: MQS, GPROC\r\n* Templates: DTL\r\n* Sessions: STD and Autogenerated Logins\r\n* DOM Language: Nitrogen DSL, Erlang Shen\r\n* Speed: 15K req/s\r\n* Security: AES CBC 128\r\n* Samples: Skyline (DSL), Games (SPA)\r\n\r\nSample Page in DSL\r\n------------------\r\n\r\n```erlang\r\n-module(index).\r\n-compile(export_all).\r\n-include_lib(\"n2o/include/wf.hrl\").\r\n\r\npeer()    -> io_lib:format(\"~p\",[wf:peer(?REQ)]).\r\nmessage() -> wf:js_escape(wf:html_encode(wf:q(message))).\r\nmain()    -> #dtl{file=\"index\",app=n2o_sample,bindings=[{body,body()}]}.\r\nbody() ->\r\n    {ok,Pid} = wf:comet(fun() -> chat_loop() end),\r\n    [ #panel{id=history}, #textbox{id=message},\r\n      #button{id=send,body=\"Chat\",postback={chat,Pid},source=[message]} ].\r\n\r\nevent(init) -> wf:reg(room);\r\nevent({chat,Pid}) -> Pid ! {peer(), message()};\r\nevent(Event) -> skip.\r\n\r\nchat_loop() ->\r\n    receive {Peer, Message} ->\r\n       wf:insert_bottom(history,#panel{body=[Peer,\": \",Message,#br{}]}),\r\n       wf:flush(room) end, chat_loop().\r\n```\r\n\r\nAnd try to compare how this functionality would be implemented\r\nwith your favourite language/framework.\r\n\r\nPerformance\r\n-----------\r\n\r\nWe are using for measurement ab, httperf, wrk and siege, all of them. The most valuable storm\r\ncreated by wrk and it is not achieved in real apps but could show us the internal throughput\r\nof individual components. The most near to real life apps is siege who also make DNS lookup\r\nfor each request. So this data shows internal data throughput by wrk:\r\n\r\n| Framework | Enabled Components | Speed | Timeouts |\r\n|-----------|--------------------|-------|----------|\r\n| PHP5 FCGI | Simple script with two <?php print \"OK\"; ?> terms inside | 5K | timeouts |\r\n| Nitrogen  | No sessions, No DSL, Simple template with two variable | 1K | no |\r\n| N2O       | All enabled, sessions, Template, heavy DSL | 7K | no |\r\n| N2O       | Sessions enabled, template with two variables, no DSL | 10K | no |\r\n| N2O       | No sessions, No DSL, only template with two vars | 15K | no |\r\n\r\nKickstart Bootstrap\r\n-------------------\r\n\r\nTo try N2O you just need to clone a N2O repo from Github and build.\r\nWe use very small and powerfull mad tool designed for our Web Stack.\r\n\r\n    $ cd n2o/samples\r\n    $ ./mad deps compile plan repl\r\n\r\nNow you can try: [http://localhost:8000](http://localhost:8000)\r\n\r\nLINUX NOTE: if you want to have online recompilation you should do at first:\r\n\r\n    $ sudo apt-get install inotify-tools\r\n\r\nSupport\r\n-------\r\n\r\n* IRC Channel #n2o on FreeNode 24/7\r\n* Official N2O Book [HTML](http://synrc.com/framework/web/) and [PDF](https://synrc.com/apps/n2o/doc/book.pdf)\r\n\r\nCredits\r\n-------\r\n\r\n* Maxim Sokhatsky -- core, shen, windows\r\n* Dmitry Bushmelev -- endpoints, yaws, cowboy\r\n* Andrey Martemyanov -- binary protocols\r\n* Andrii Zadorozhnii -- elements, actions, handlers\r\n* Anton Logvinenko -- doc\r\n* Vladimir Kirillov -- mac, bsd, xen, linux support\r\n* Roman Shestakov -- advanced elements, ct\r\n* Jesse Gumm -- nitrogen, help\r\n* Rusty Klophaus -- original author\r\n\r\nOM A HUM\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
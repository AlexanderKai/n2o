{"name":"N2O","tagline":"WebSocket Application Server","body":"N2O: Erlang Application Server\r\n==============================\r\n\r\n[![Build Status](https://travis-ci.org/synrc/n2o.svg?branch=master)](https://travis-ci.org/synrc/n2o)\r\n\r\nFeatures\r\n--------\r\n\r\n* Formatters: **BERT**, JSON — changeable on the fly\r\n* Protocols: [N2O](http://5ht.co/n2o.htm), [NITRO](http://5ht.co/n2o.htm), [SPA](http://5ht.co/n2o.htm), [FTP](http://5ht.co/ftp.htm)\r\n* Endpoints: **WebSocket**, HTTP, [REST](http://synrc.github.io/rest)\r\n* High Performance Protocol Relay\r\n* Smallest possible codebase — **1K** **LOC**\r\n* BEAM/LING support on posix, arm, mips and xen platforms\r\n* Single-file atomic packaging with [MAD](http://synrc.github.io/mad)\r\n* Handlers\r\n  * PubSub: MQS, GPROC\r\n  * Templates: DTL, [NITRO](http://synrc.github.io/nitro)\r\n  * Sessions: server driven\r\n  * DOM Language: SHEN JavaScript Compiler\r\n  * Error Logging: IO, LOGGER\r\n  * Security: PLAIN, AES CBC 128\r\n* Speed: **30K** **conn/s** at notebook easily\r\n* Samples: Skyline (DSL), Games (SPA), Review (KVS), Sample (MAD)\r\n\r\nOptional Dependencies\r\n---------------------\r\n\r\nN2O comes with BERT message formatter support out of the box, and you only need\r\none N2O dependency in this case. Should you need DTL templates, JSON message formatter, \r\nSHEN JavaScript Compiler or NITRO Nitrogen DSL you can plug all of them in separately:\r\n\r\n```erlang\r\n{n2o,    \".*\",{git,\"git://github.com/synrc/n2o\",         {tag, \"2.8\"}}},\r\n{nitro,  \".*\",{git,\"git://github.com/synrc/nitro\",       {tag, \"2.8\"}}},\r\n{shen,   \".*\",{git,\"git://github.com/synrc/shen\",        {tag, \"1.5\"}}},\r\n{jsone,  \".*\",{git,\"git://github.com/sile/jsone.git\",    {tag,\"v0.3.3\"}}},\r\n{erlydtl,\".*\",{git,\"git://github.com/evanmiller/erlydtl\",{tag,\"0.8.0\"}}},\r\n```\r\n\r\nMessage Formatters\r\n------------------\r\n\r\nYou can use any message formmatter at the bottom of N2O protocol.\r\nIO messages supported by the N2O protocol are as follows:\r\n\r\n```\r\n1. BERT : {io,\"console.log('hello')\",1}\r\n2. WAMP : [io,\"console.log('hello')\",1]\r\n3. JSON : {name:io,eval:\"console.log('hello')\",data:1}\r\n4. TEXT : IO console.log('hello') 1\\n\r\n5. XML  : <io><eval>console.log('hello')</eval><data>1</data></io>\r\n```\r\n\r\nBesides, you can even switch a channel termination formatter on the fly\r\nwithin one WebSocket session.\r\n\r\nAll Features in One snippet\r\n---------------------------\r\n\r\n```erlang\r\n-module(index).\r\n-compile(export_all).\r\n-include_lib(\"nitro/include/nitro.hrl\").\r\n-include_lib(\"n2o/include/wf.hrl\").\r\n\r\npeer()    -> io_lib:format(\"~p\",[wf:peer(?REQ)]).\r\nmessage() -> wf:js_escape(wf:html_encode(wf:q(message))).\r\nmain()    -> #dtl{file=\"index\",app=n2o_sample,bindings=[{body,body()}]}.\r\nbody() ->\r\n    {Pid,_} = wf:async(fun(X) -> chat_loop(X) end),\r\n    [ #panel{id=history}, #textbox{id=message},\r\n      #button{id=send,body=\"Chat\",postback={chat,Pid},source=[message]} ].\r\n\r\nevent(init) -> wf:reg(room);\r\nevent({chat,Pid}) -> Pid ! {peer(), message()};\r\nevent(Event) -> skip.\r\n\r\nchat_loop({Peer, Message} ) ->\r\n       wf:insert_bottom(history,#panel{body=[Peer,\": \",Message,#br{}]}),\r\n       wf:flush(room) end.\r\n```\r\n\r\nPerformance\r\n-----------\r\n\r\nab, httperf, wrk and siege are all used for measuring performance. \r\nThe most valuable request hell is created by wrk and even though it \r\nis not achievable in real apps, it can demonstrate internal throughput \r\nof certain individual components. \r\n\r\nThe nearest to real life apps is siege which also performs a DNS lookup\r\nfor each request. The data below shows internal data throughput by wrk:\r\n\r\n| Framework | Enabled Components | Speed | Timeouts |\r\n|-----------|--------------------|-------|----------|\r\n| PHP5 FCGI | Simple script with two <?php print \"OK\"; ?> | 5K | timeouts |\r\n| ChicagoBoss| No sessions, No DSL, Simple DTL | 500 | no |\r\n| Nitrogen  | No sessions, No DSL, Simple DTL | 1K | no |\r\n| N2O       | All enabled, sessions, Template, heavy DSL | 7K | no |\r\n| N2O       | Sessions enabled, template with two variables, no DSL | 10K | no |\r\n| N2O       | No sessions, No DSL, only template with two vars | 15K | no |\r\n\r\nKickstart Bootstrap\r\n-------------------\r\n\r\nTo try N2O you  need to clone a N2O repo from Github and build it.\r\nWe use a very small and powerful tool called mad designed specially for our Web Stack.\r\n\r\n    $ git clone git://github.com/synrc/n2o\r\n    $ cd n2o/samples\r\n    $ ./mad deps compile plan repl\r\n\r\nNow you can try it out: [http://localhost:8000](http://localhost:8000)\r\n\r\nLINUX NOTE: if you want to have online recompilation you should install `inotify-tools` first:\r\n\r\n    $ sudo apt-get install inotify-tools\r\n\r\nErlang version\r\n--------------\r\n\r\nWe don't accept any reports of problems related to ESL or Ubuntu packaging.\r\nWe only support Erlang built from sources, official Windows package,\r\nbuilt with kerl or installed on Mac with homebrew. If you have any problems\r\nwith your favourite Erlang package for your OS, please report issues\r\nto package maintainer.\r\n\r\nPosting Issues on Github\r\n-------\r\n\r\nThank you for using N2O (you've made a wise choice) and your contributions\r\nto help make it better. Before posting an issue on Github, please contact\r\nus via the options listed below in the support section. Doing so will\r\nhelp us determine whether your issue is a suggested feature, refactor\r\nof existing code, bug, etc, that needs to be posted to GitHub for the\r\ncontributing development community of N2O to incorporate. DO NOT post\r\nissues to GitHub related to misuses of N2O, all such issues will be closed.\r\n\r\nSupport\r\n-------\r\n* [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/synrc/n2o?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n* IRC Channel #n2o on FreeNode 24/7\r\n\r\nDocumentation\r\n-------\r\n\r\nIf you are new or you need to decide whether the N2O architecture\r\nand philosophy is a fit for your project\r\n\r\n* Official N2O Book [PDF](http://synrc.com/apps/n2o/doc/book.pdf)\r\n\r\nWindows Users\r\n-------------\r\n\r\nFor windows you should install http://msys2.github.io and\r\nappropriative packages to use Synrc Stack:\r\n\r\n* pacman -S git\r\n\r\nCredits\r\n-------\r\n\r\n* Maxim Sokhatsky — core, shen, windows\r\n* Dmitry Bushmelev — endpoints, yaws, cowboy\r\n* Andrii Zadorozhnii — elements, actions, handlers\r\n* Vladimir Kirillov — mac, bsd, xen, linux support\r\n* Andrey Martemyanov — binary protocols\r\n* Oleksandr Nikitin — security\r\n* Anton Logvinenko — doc\r\n* Roman Shestakov — advanced elements, ct\r\n* Jesse Gumm — nitrogen, help\r\n* Rusty Klophaus — original author\r\n\r\nOM A HUM\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}